name: Automated tests

on:
  workflow_dispatch:
    inputs:
      deployment_target:
        description: Choose target
        required: true
        type: choice
        options:
          - order_hotel_test
          - correct_order_test
          - cancel_order_test
          - filter_order_test
          - cancel_AA_test
          - order_two_guests_test

jobs:
  tests:
    runs-on: macos-latest
    permissions:
      contents: read  # Прочтение репозитория
      id-token: write  # Разрешение для получения и использования ID токенов

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      # Кэширование зависимостей Python
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-

      - name: Install Chrome
        run: brew install --cask google-chrome

      - name: Install dependencies
        run: pip install -r requirements.txt

      # Запуск тестов в зависимости от выбранной цели
      - name: first test
        if: "github.event.inputs.deployment_target == 'order_hotel_test'"
        run: pytest tests/test_order_hotel.py --alluredir=allure-results
      - name: second test
        if: "github.event.inputs.deployment_target == 'correct_order_test'"
        run: pytest tests/test_correct_order_hotel.py --alluredir=allure-results
      - name: third test
        if: "github.event.inputs.deployment_target == 'cancel_order_test'"
        run: pytest tests/test_cancel_order_hotel.py --alluredir=allure-results
      - name: forth test
        if: "github.event.inputs.deployment_target == 'filter_order_test'"
        run: pytest tests/test_filter_hotel.py --alluredir=allure-results
      - name: fifth test
        if: "github.event.inputs.deployment_target == 'cancel_AA_test'"
        run: pytest tests/test_order_hotel_AA.py --alluredir=allure-results
      - name: sixth test
        if: "github.event.inputs.deployment_target == 'order_two_guests_test'"
        run: pytest tests/test_order_hotel_two_guests.py --alluredir=allure-results

      # Проверка содержимого allure-results после выполнения тестов
      - name: List allure-results content
        run: |
          echo "Listing contents of allure-results directory"
          ls -R allure-results || echo "allure-results not found"

      # Хранение результатов тестов (Allure results)
      - name: Store allure results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ github.event.inputs.deployment_target }}
          path: allure-results
          retention-days: 7

  generate-report:
    runs-on: macos-latest
    needs: tests
    name: Generate report
    steps:
      - name: Install Allure Commandline
        run: |
          curl -o allure.zip -L https://github.com/allure-framework/allure2/releases/download/2.18.1/allure-2.18.1.zip
          unzip allure.zip
          sudo mv allure-2.18.1 /usr/local/allure
          sudo ln -s /usr/local/allure/bin/allure /usr/local/bin/allure

      - name: Check Allure version
        run: allure --version

      # Загрузка артефактов с результатами тестов
      - name: Download allure results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-${{ github.event.inputs.deployment_target }}
          path: allure-results
          merge-multiple: true

      # Проверка содержимого папки allure-results
      - name: List allure-results content
        run: |
          echo "Listing contents of allure-results directory"
          ls -R allure-results || echo "allure-results directory not found"

      # Убедитесь, что директория _site существует и очищена
      - name: Ensure _site directory exists
        run: |
          echo "Checking if _site exists..."
          if [ -d "_site" ]; then
            echo "_site exists, cleaning up..."
            rm -rf _site
          else
            echo "_site does not exist, creating it..."
            mkdir -p _site
          fi

      # Генерация отчета Allure
      - name: Generate Allure Report
        run: |
          echo "Listing contents of allure-results directory"
          ls -R allure-results || echo "allure-results directory not found"
          allure generate -c allure-results -o _site || (echo "Allure report generation failed" && exit 1)

      # Проверка содержимого директории _site после генерации отчета
      - name: List files in _site after report generation
        run: |
          echo "Listing files in _site"
          ls -R _site || echo "_site directory not found"

      - name: Store generated report
        uses: actions/upload-artifact@v4
        with:
          name: _site
          path: _site
          retention-days: 7
          overwrite: true  # Это позволит перезаписать артефакт, если он уже существует


  publish-report:
    runs-on: macos-latest
    needs: generate-report
    permissions:
      contents: write  # Для деплоя в GitHub Pages, нужно разрешение на запись
      id-token: write  # Разрешение для работы с id-token
    name: Report publication
    steps:
      - name: Download generated report
        uses: actions/download-artifact@v4
        with:
          name: _site  # Указываем имя артефакта, который был загружен на предыдущем шаге
          path: _site  # Указываем путь для сохранения артефакта

      - name: List files in the downloaded artifact
        run: |
          echo "Listing files in _site"
          ls -R _site || echo "_site directory not found"  # Проверка наличия артефакта

      - name: Upload Pages artifact
        uses: actions/upload-artifact@v4  # Явное указание на v4 для upload-artifact
        with:
          name: _site
          path: _site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4  # Используем deploy-pages для деплоя на GitHub Pages
        with:
          path: _site  # Используем правильный параметр path для указания директории
          token: ${{ secrets.GITHUB_TOKEN }}  # Используем секретный токен для деплоя
          timeout: 600000  # Увеличиваем таймаут, если это необходимо
          error_count: 10  # Максимальное количество ошибок
          reporting_interval: 5000  # Интервал для отчетности
          artifact_name: github-pages  # Указываем имя артефакта, который будет деплоиться
          preview: false  # Выключаем предварительный просмотр

