name: Automated tests

on:
  workflow_dispatch:
    inputs:
      deployment_target:
        description: Choose target
        required: true
        type: choice
        options:
          - order_hotel_test
          - correct_order_test
          - cancel_order_test
          - filter_order_test
          - cancel_AA_test
          - order_two_guests_test

jobs:
  tests:
    runs-on: macos-latest
    permissions:
      contents: read
      id-token: write
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-

      - name: Install Chrome
        run: brew install --cask google-chrome

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run tests based on deployment target
        run: |
          if [ "${{ github.event.inputs.deployment_target }}" == "order_hotel_test" ]; then
            pytest tests/test_order_hotel.py --alluredir=allure-results
          elif [ "${{ github.event.inputs.deployment_target }}" == "correct_order_test" ]; then
            pytest tests/test_correct_order_hotel.py --alluredir=allure-results
          elif [ "${{ github.event.inputs.deployment_target }}" == "cancel_order_test" ]; then
            pytest tests/test_cancel_order_hotel.py --alluredir=allure-results
          elif [ "${{ github.event.inputs.deployment_target }}" == "filter_order_test" ]; then
            pytest tests/test_filter_hotel.py --alluredir=allure-results
          elif [ "${{ github.event.inputs.deployment_target }}" == "cancel_AA_test" ]; then
            pytest tests/test_order_hotel_AA.py --alluredir=allure-results
          elif [ "${{ github.event.inputs.deployment_target }}" == "order_two_guests_test" ]; then
            pytest tests/test_order_hotel_two_guests.py --alluredir=allure-results
          fi

      - name: List allure-results content
        run: |
          echo "Listing contents of allure-results directory"
          ls -R allure-results || echo "allure-results not found"

      - name: Store allure results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ github.event.inputs.deployment_target }}
          path: allure-results
          retention-days: 7

  generate-report:
    runs-on: macos-latest
    needs: tests
    name: Generate Allure Report
    permissions:
      actions: read
      contents: read
      id-token: write
    steps:
      - name: Install Allure Commandline
        run: |
          curl -o allure.zip -L https://github.com/allure-framework/allure2/releases/download/2.18.1/allure-2.18.1.zip
          unzip allure.zip
          sudo mv allure-2.18.1 /usr/local/allure
          sudo ln -s /usr/local/allure/bin/allure /usr/local/bin/allure

      - name: Check Allure version
        run: allure --version

      - name: Download allure results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-${{ github.event.inputs.deployment_target }}
          path: allure-results
          merge-multiple: true

      - name: List allure-results content
        run: |
          echo "Listing contents of allure-results directory"
          ls -R allure-results || echo "allure-results directory not found"

      - name: Ensure _site directory exists
        run: |
          echo "Checking if _site exists..."
          if [ -d "_site" ]; then
            echo "_site exists, cleaning up..."
            rm -rf _site
          else
            echo "_site does not exist, creating it..."
            mkdir -p _site
          fi

      - name: Generate Allure Report
        run: |
          echo "Listing contents of allure-results directory"
          ls -R allure-results || echo "allure-results directory not found"
          allure generate -c allure-results -o _site || (echo "Allure report generation failed" && exit 1)

      - name: List files in _site after report generation
        run: |
          echo "Listing files in _site"
          ls -R _site || echo "_site directory not found"

      - name: Store generated report
        uses: actions/upload-artifact@v4
        with:
          name: _site-${{ github.run_id }}-${{ github.sha }}
          path: _site
          retention-days: 7
          overwrite: false

  publish-report:
    runs-on: macos-latest
    needs: generate-report
    permissions:
      contents: write
      id-token: write
      actions: read
      pages: write
    name: Publish Allure Report to GitHub Pages
    steps:
      - name: Download generated report
        uses: actions/download-artifact@v4
        with:
          name: _site-${{ github.run_id }}-${{ github.sha }}
          path: _site
          merge-multiple: true

      - name: Check and remove symbolic links in the entire project
        run: |
          echo "Checking for symbolic links in the entire project..."
          symlinks=$(find . -type l)
          if [ -n "$symlinks" ]; then
            echo "Symbolic links found, removing them:"
            echo "$symlinks"
            find . -type l -exec rm -v {} \;
          else
            echo "No symbolic links found"
          fi

      - name: Check and remove hard links in the entire project
        run: |
          echo "Checking for hard links in the entire project..."
          hardlinks=$(find . -type f -links +1)
          if [ -n "$hardlinks" ]; then
            echo "Hard links found, removing them:"
            echo "$hardlinks"
            find . -type f -links +1 -exec rm -v {} \;
          else
            echo "No hard links found"
          fi

      - name: List contents of _site before deploy
        run: |
          echo "Listing contents of _site directory before deploy"
          ls -alR _site || echo "_site directory not found"

      - name: Check permissions of files in _site
        run: |
          echo "Checking permissions of files in _site"
          find _site -exec ls -l {} \; || echo "Error checking permissions"

      - name: Remove hidden files in _site
        run: |
          echo "Removing hidden files in _site directory..."
          find _site -name ".*" -exec rm -rf {} \; || echo "No hidden files found to remove"

      - name: Verify no symlinks in _site before deploy
        run: |
          echo "Checking for symbolic links in _site directory before deploy..."
          symlinks=$(find _site -type l)
          if [ -n "$symlinks" ]; then
            echo "Symbolic links found before deploy, listing them:"
            echo "$symlinks"
            exit 1
          else
            echo "No symbolic links found in _site"
          fi

      - name: Verify no hard links in _site before deploy
        run: |
          echo "Checking for hard links in _site directory before deploy..."
          hardlinks=$(find _site -type f -links +1)
          if [ -n "$hardlinks" ]; then
            echo "Hard links found before deploy, listing them:"
            echo "$hardlinks"
            exit 1
          else
            echo "No hard links found in _site"
          fi

      - name: Verify no symlinks in the entire repository
        run: |
          echo "Checking for symbolic links in the entire repository..."
          symlinks=$(find . -type l)
          if [ -n "$symlinks" ]; then
            echo "Symbolic links found in the repository, listing them:"
            echo "$symlinks"
            exit 1
          else
            echo "No symbolic links found in the repository"
          fi

      - name: Upload Pages artifact
        uses: actions/upload-artifact@v4
        with:
          name: _site
          path: _site

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v4
        with:
          name: _site-${{ github.run_id }}-${{ github.sha }}
          path: _site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          timeout: 600000
          error_count: 10
          reporting_interval: 5000
          artifact_name: _site-${{ github.run_id }}-${{ github.sha }}
          preview: false
